rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============ CORE PRODUCT MANAGEMENT ============
    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.artisanId &&
                   validateProductData(request.resource.data);
      allow update: if request.auth != null && (
                   (request.auth.uid == resource.data.artisanId &&
                    validateProductUpdate(request.resource.data, resource.data)) ||
                   validateLikesViewsUpdate(request.resource.data, resource.data) ||
                   onlyUpdatingRatingFields(request.resource.data, resource.data)
                   );
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.artisanId;
    }
    
    // ============ USER PROFILE MANAGEMENT ============
    match /sellers/{sellerId} {
      allow read: if true;
      allow create, update: if request.auth != null && 
                           (request.auth.uid == sellerId ||
                            sellerId == request.auth.uid + '_retailer');
      allow delete: if request.auth != null && 
                   (request.auth.uid == sellerId ||
                    sellerId == request.auth.uid + '_retailer');
    }
    
    match /stores/{storeId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && 
                                   (request.auth.uid == storeId ||
                                    storeId == request.auth.uid + '_retailer');
    }
    
    match /customers/{customerId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && 
                                   (request.auth.uid == customerId ||
                                    customerId == request.auth.uid + '_customer');
      match /{subcollection=**} {
        allow read, write: if request.auth != null && 
                          (request.auth.uid == customerId ||
                           customerId == request.auth.uid + '_customer');
      }
    }
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && 
                                   (request.auth.uid == userId ||
                                    userId.matches(request.auth.uid + '_.*'));
      match /{subcollection=**} {
        allow read, write: if request.auth != null && 
                          (request.auth.uid == userId ||
                           userId.matches(request.auth.uid + '_.*'));
      }
    }

    match /retailers/{retailerId} {
      allow read: if true;
      allow create, update: if request.auth != null && 
                           (request.auth.uid == retailerId ||
                            retailerId == request.auth.uid + '_retailer');
      allow delete: if request.auth != null && 
                   (request.auth.uid == retailerId ||
                    retailerId == request.auth.uid + '_retailer');
    }
    
    // ============ ORDER AND TRANSACTION MANAGEMENT ============
    match /orders/{orderId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.buyerId || 
         request.auth.uid == resource.data.sellerId ||
         request.auth.uid == resource.data.artisanId);
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.buyerId;
    }
    
    match /daily_revenue/{revenueId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.sellerId;
      allow create: if request.auth != null;
    }
    
    // ============ FAVORITES AND SOCIAL FEATURES ============
    match /favorites/{favoriteId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
    }
    
    match /user_activity/{activityId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
    }
    
    // ============ COMMUNICATION ============
    match /chat_rooms/{chatRoomId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.customerId || 
         request.auth.uid == resource.data.artisanId ||
         request.auth.uid == resource.data.sellerId);
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.customerId ||
           request.auth.uid == get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.artisanId ||
           request.auth.uid == get(/databases/$(database)/documents/chat_rooms/$(chatRoomId)).data.sellerId);
      }
    }
    
    match /conversations/{conversationId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
                          request.auth.uid in get(/databases/$(database)/documents/conversations/$(conversationId)).data.participants;
      }
    }
    
    // ============ NOTIFICATIONS ============
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                 request.auth.uid == resource.data.userId;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
                           request.auth.uid == resource.data.userId;
    }
    
    // ============ CRAFT REQUESTS ============
    match /craft_requests/{requestId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.buyerId &&
                   validateCraftRequestData(request.resource.data);
      allow update: if request.auth != null && (
                   request.auth.uid == resource.data.buyerId ||
                   validateQuotationUpdate(request.resource.data, resource.data) ||
                   validateCollaborationUpdate(request.resource.data, resource.data)
                   );
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.buyerId;
    }

    // ============ COLLABORATION SYSTEM ============
    match /collaboration_projects/{projectId} {
      allow read: if resource.data.status == 'open' || 
                 (request.auth != null && 
                  (request.auth.uid == resource.data.buyerId ||
                   request.auth.uid == resource.data.leadArtisanId ||
                   request.auth.uid in resource.data.get('collaboratorIds', [])));
      
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.leadArtisanId &&
                   validateCollaborationProjectData(request.resource.data);
      
      allow update: if request.auth != null && 
                   (request.auth.uid == resource.data.buyerId ||
                    request.auth.uid == resource.data.leadArtisanId ||
                    request.auth.uid in resource.data.get('collaboratorIds', [])) &&
                   validateCollaborationProjectUpdate(request.resource.data, resource.data);
      
      allow delete: if request.auth != null && 
                   (request.auth.uid == resource.data.buyerId ||
                    request.auth.uid == resource.data.leadArtisanId);
      
      // Project Applications subcollection
      match /applications/{applicationId} {
        allow read: if (get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.status == 'open') ||
                   (request.auth != null && 
                    (request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                     request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId ||
                     request.auth.uid == resource.data.artisanId));
        
        allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.artisanId &&
                     get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.status == 'open' &&
                     validateApplicationData(request.resource.data);
        
        allow update: if request.auth != null && 
                     (request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                      request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId ||
                      (request.auth.uid == resource.data.artisanId && resource.data.status == 'pending'));
        
        allow delete: if request.auth != null && 
                     request.auth.uid == resource.data.artisanId &&
                     resource.data.status == 'pending';
      }
      
      // Project Tasks subcollection
      match /tasks/{taskId} {
        allow read: if request.auth != null && 
                   (request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                    request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId ||
                    request.auth.uid in get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.get('collaboratorIds', []));
        
        allow create, update: if request.auth != null && 
                             (request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                              request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId);
        
        allow update: if request.auth != null && 
                     request.auth.uid == resource.data.get('assignedTo', '') &&
                     validateTaskStatusUpdate(request.resource.data, resource.data);
        
        allow delete: if request.auth != null && 
                     (request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                      request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId);
      }
      
      // Project Messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null && 
                   (request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                    request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId ||
                    request.auth.uid in get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.get('collaboratorIds', []));
        
        allow create: if request.auth != null && 
                     request.auth.uid == request.resource.data.senderId &&
                     (request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                      request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId ||
                      request.auth.uid in get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.get('collaboratorIds', []));
        
        allow update: if request.auth != null && 
                     request.auth.uid == resource.data.senderId;
        
        allow delete: if request.auth != null && 
                     (request.auth.uid == resource.data.senderId ||
                      request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.buyerId ||
                      request.auth.uid == get(/databases/$(database)/documents/collaboration_projects/$(projectId)).data.leadArtisanId);
      }
    }
    
    // ============ ADMINISTRATIVE AND SYSTEM ============
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if false; // Admin/system only
    }
    
    match /analytics/{analyticsId} {
      allow read: if request.auth != null;
      allow write: if false; // System only
    }
    
    match /promotions/{promotionId} {
      allow read: if true;
      allow write: if false; // Admin only
    }
    
    match /system_config/{configId} {
      allow read: if request.auth != null;
      allow write: if false; // Admin only
    }
    
    // ============ CHAT SYSTEM ============
    match /chat_rooms/{chatRoomId} {
      allow read, write: if request.auth != null;
      allow create: if request.auth != null;
        
      match /messages/{messageId} {
        allow read, write: if request.auth != null;
        allow create: if request.auth != null;
      }
    }
    
    // ============ LIVING WORKSHOPS ============
    match /living_workshops/{workshopId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   (request.auth.uid == workshopId || 
                    request.auth.uid == request.resource.data.userId ||
                    request.auth.uid == request.resource.data.artisanId);
      allow update: if request.auth != null && 
                   (request.auth.uid == workshopId ||
                    request.auth.uid == resource.data.userId ||
                    request.auth.uid == resource.data.artisanId);
      allow delete: if request.auth != null && 
                   (request.auth.uid == workshopId ||
                    request.auth.uid == resource.data.userId ||
                    request.auth.uid == resource.data.artisanId);
    }
    
    // ============ REVIEWS AND RATINGS SYSTEM ============
    match /reviews/{reviewId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.userId
        && isValidReview(request.resource.data);
      allow update: if (
        (
          request.auth != null && (
            request.auth.uid == resource.data.userId ||
            isProductOwner(request.auth.uid, resource.data.productId)
          )
        ) ||
        isTranslationUpdate(request.resource.data, resource.data)
      );
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // ============ VALIDATION FUNCTIONS ============
    function validateProductData(data) {
      return data.keys().hasAll(['name', 'description', 'price', 'artisanId', 'category']) &&
             data.name is string && data.name.size() > 0 &&
             data.description is string && data.description.size() > 0 &&
             data.price is number && data.price > 0 &&
             data.artisanId is string && data.artisanId.size() > 0 &&
             data.category is string && data.category.size() > 0;
    }
    
    function validateProductUpdate(newData, existingData) {
      return newData.artisanId == existingData.artisanId &&
             (newData.diff(existingData).affectedKeys().hasOnly(['name', 'description', 'price', 'stockQuantity', 'materials', 'tags', 'category', 'dimensions', 'craftingTime', 'careInstructions', 'isActive', 'updatedAt', 'imageUrl', 'imageUrls', 'videoUrl', 'audioStoryUrl', 'audioStoryTranscription', 'audioStoryTranslations', 'aiAnalysis', 'searchTerms', 'priceRange', 'views', 'likes', 'likedBy', 'artisanLegacyStory', 'storyIngredients', 'provenanceMapData']));
    }
    
    function validateLikesViewsUpdate(newData, existingData) {
      return newData.diff(existingData).affectedKeys().hasOnly(['likes', 'likedBy', 'views']) &&
             newData.artisanId == existingData.artisanId &&
             newData.name == existingData.name &&
             newData.price == existingData.price;
    }
    
    function validateCraftRequestData(data) {
      return data.keys().hasAll(['buyerId', 'title', 'description', 'budget']) &&
             data.buyerId is string && data.buyerId.size() > 0 &&
             data.title is string && data.title.size() > 0 &&
             data.description is string && data.description.size() > 0 &&
             data.budget is number && data.budget > 0;
    }
    
    function validateQuotationUpdate(newData, existingData) {
      return newData.diff(existingData).affectedKeys().hasOnly([
        'quotations', 
        'updatedAt', 
        'acceptedQuotation', 
        'status',
        'isOpenForCollaboration',
        'collaborationProjectId',
        'leadArtisanId',
        'collaborationStatus'
      ]) &&
      newData.buyerId == existingData.buyerId &&
      newData.title == existingData.title &&
      newData.budget == existingData.budget;
    }

    function validateCollaborationUpdate(newData, existingData) {
      return newData.diff(existingData).affectedKeys().hasOnly([
        'isOpenForCollaboration',
        'collaborationProjectId', 
        'leadArtisanId',
        'collaborationStatus',
        'updatedAt'
      ]) &&
      newData.buyerId == existingData.buyerId &&
      newData.title == existingData.title &&
      newData.budget == existingData.budget;
    }
    
    function validateCollaborationProjectData(data) {
      return data.keys().hasAll(['leadArtisanId', 'title', 'description', 'totalBudget', 'deadline', 'category', 'requiredRoles']) &&
             data.leadArtisanId is string && data.leadArtisanId.size() > 0 &&
             data.title is string && data.title.size() > 0 &&
             data.description is string && data.description.size() > 0 &&
             data.totalBudget is number && data.totalBudget > 0 &&
             data.deadline is timestamp &&
             data.category is string && data.category.size() > 0 &&
             data.requiredRoles is list && data.requiredRoles.size() > 0 &&
             data.status in ['open', 'in_progress', 'completed', 'cancelled'];
    }

    function validateCollaborationProjectUpdate(newData, existingData) {
      return newData.leadArtisanId == existingData.leadArtisanId &&
             newData.diff(existingData).affectedKeys().hasOnly(['title', 'description', 'totalBudget', 'deadline', 'status', 'collaboratorIds', 'progressPercentage', 'budgetAllocation', 'updatedAt', 'additionalNotes', 'requirements', 'tags', 'complexity', 'urgency', 'isUrgent', 'allowPartialDelivery', 'requireQualitySamples', 'attachments', 'requiredRoles']);
    }

    function validateApplicationData(data) {
      return data.keys().hasAll(['artisanId', 'proposal', 'proposedRate', 'estimatedDays']) &&
             data.artisanId is string && data.artisanId.size() > 0 &&
             data.proposal is string && data.proposal.size() > 0 &&
             data.proposedRate is number && data.proposedRate > 0 &&
             data.estimatedDays is number && data.estimatedDays > 0 &&
             data.status in ['pending', 'accepted', 'rejected'];
    }

    function validateTaskStatusUpdate(newData, existingData) {
      return newData.diff(existingData).affectedKeys().hasOnly(['status', 'completedAt', 'notes', 'progress', 'updatedAt']) &&
             newData.id == existingData.id &&
             newData.assignedTo == existingData.assignedTo;
    }
    
    function isValidReview(reviewData) {
      return reviewData.rating >= 1 
        && reviewData.rating <= 5
        && reviewData.comment.size() >= 10
        && reviewData.comment.size() <= 500
        && reviewData.userId == request.auth.uid;
    }
    
    function isProductOwner(userId, productId) {
      return exists(/databases/$(database)/documents/products/$(productId)) &&
        get(/databases/$(database)/documents/products/$(productId)).data.artisanId == userId;
    }
    
    function isTranslationUpdate(newData, oldData) {
      let changedKeys = newData.diff(oldData).affectedKeys();
      return changedKeys.hasOnly([
        'commentTranslations',
        'translations',
        'detectedLanguage',
        'artisanResponseTranslations',
        'artisanVoiceTranslations',
        'updatedAt'
      ]);
    }
    
    function onlyUpdatingRatingFields(newData, oldData) {
      return newData.diff(oldData).affectedKeys().hasOnly(['rating', 'reviewCount', 'updatedAt']);
    }
    
    // ============ FALLBACK RULES ============
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Explicit permissions required
    }
  }
}